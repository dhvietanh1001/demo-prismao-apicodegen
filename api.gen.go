// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Role defines model for Role.
type Role struct {
	AssignedTo  *string     `json:"assigned_to"`
	CreatedAt   *time.Time  `json:"created_at,omitempty"`
	Description *string     `json:"description"`
	Id          *int        `json:"id,omitempty"`
	Name        *string     `json:"name,omitempty"`
	Userroles   *[]UserRole `json:"userroles,omitempty"`
}

// RoleBasic defines model for RoleBasic.
type RoleBasic struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// RoleCreate defines model for RoleCreate.
type RoleCreate struct {
	AssignedTo  *string `json:"assigned_to"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// RoleUpdate defines model for RoleUpdate.
type RoleUpdate struct {
	AssignedTo  *string `json:"assigned_to"`
	Description *string `json:"description"`
	Name        *string `json:"name,omitempty"`
}

// Setting defines model for Setting.
type Setting struct {
	Id          *int                    `json:"id,omitempty"`
	Preferences *map[string]interface{} `json:"preferences,omitempty"`
	User        *UserBasic              `json:"user,omitempty"`
	UserId      *int                    `json:"user_id,omitempty"`
}

// SettingCreate defines model for SettingCreate.
type SettingCreate struct {
	Preferences map[string]interface{} `json:"preferences"`
	UserId      int                    `json:"user_id"`
}

// SettingUpdate defines model for SettingUpdate.
type SettingUpdate struct {
	Preferences map[string]interface{} `json:"preferences"`
}

// User defines model for User.
type User struct {
	CreatedAt    *time.Time           `json:"created_at,omitempty"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	Id           *int                 `json:"id,omitempty"`
	Name         *string              `json:"name,omitempty"`
	PasswordHash *string              `json:"password_hash,omitempty"`
	Settings     *Setting             `json:"settings,omitempty"`
	SsoUserid    *int                 `json:"sso_userid"`
	Userroles    *[]UserRole          `json:"userroles,omitempty"`
}

// UserBasic defines model for UserBasic.
type UserBasic struct {
	Email *string `json:"email,omitempty"`
	Id    *int    `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	Name      string              `json:"name"`
	Password  string              `json:"password"`
	SsoUserid *int                `json:"sso_userid"`
}

// UserRole defines model for UserRole.
type UserRole struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Role      *RoleBasic `json:"role,omitempty"`
	RoleId    *int       `json:"role_id,omitempty"`
	User      *UserBasic `json:"user,omitempty"`
	UserId    *int       `json:"user_id,omitempty"`
}

// UserRoleCreate defines model for UserRoleCreate.
type UserRoleCreate struct {
	RoleId int `json:"role_id"`
	UserId int `json:"user_id"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	Name      *string              `json:"name,omitempty"`
	Password  *string              `json:"password,omitempty"`
	SsoUserid *int                 `json:"sso_userid"`
}

// PostRolesJSONRequestBody defines body for PostRoles for application/json ContentType.
type PostRolesJSONRequestBody = RoleCreate

// PutRolesIdJSONRequestBody defines body for PutRolesId for application/json ContentType.
type PutRolesIdJSONRequestBody = RoleUpdate

// PostSettingsUserIdJSONRequestBody defines body for PostSettingsUserId for application/json ContentType.
type PostSettingsUserIdJSONRequestBody = SettingCreate

// PutSettingsUserIdJSONRequestBody defines body for PutSettingsUserId for application/json ContentType.
type PutSettingsUserIdJSONRequestBody = SettingUpdate

// PostUserrolesJSONRequestBody defines body for PostUserroles for application/json ContentType.
type PostUserrolesJSONRequestBody = UserRoleCreate

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserCreate

// PutUsersIdJSONRequestBody defines body for PutUsersId for application/json ContentType.
type PutUsersIdJSONRequestBody = UserUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all roles
	// (GET /roles)
	GetRoles(ctx echo.Context) error
	// Create a new role
	// (POST /roles)
	PostRoles(ctx echo.Context) error
	// Delete a role
	// (DELETE /roles/{id})
	DeleteRolesId(ctx echo.Context, id int) error
	// Get a role by ID
	// (GET /roles/{id})
	GetRolesId(ctx echo.Context, id int) error
	// Update a role
	// (PUT /roles/{id})
	PutRolesId(ctx echo.Context, id int) error
	// Get all settings
	// (GET /settings)
	GetSettings(ctx echo.Context) error
	// Get settings for a user
	// (GET /settings/{userId})
	GetSettingsUserId(ctx echo.Context, userId int) error
	// Create user settings
	// (POST /settings/{userId})
	PostSettingsUserId(ctx echo.Context, userId int) error
	// Update user settings
	// (PUT /settings/{userId})
	PutSettingsUserId(ctx echo.Context, userId int) error
	// Get all user roles
	// (GET /userroles)
	GetUserroles(ctx echo.Context) error
	// Assign a role to a user
	// (POST /userroles)
	PostUserroles(ctx echo.Context) error
	// Remove a role assignment
	// (DELETE /userroles/{id})
	DeleteUserrolesId(ctx echo.Context, id int) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete a user
	// (DELETE /users/{id})
	DeleteUsersId(ctx echo.Context, id int) error
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id int) error
	// Update a user
	// (PUT /users/{id})
	PutUsersId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoles(ctx)
	return err
}

// PostRoles converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoles(ctx)
	return err
}

// DeleteRolesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRolesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRolesId(ctx, id)
	return err
}

// GetRolesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRolesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRolesId(ctx, id)
	return err
}

// PutRolesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRolesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRolesId(ctx, id)
	return err
}

// GetSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSettings(ctx)
	return err
}

// GetSettingsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettingsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSettingsUserId(ctx, userId)
	return err
}

// PostSettingsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PostSettingsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSettingsUserId(ctx, userId)
	return err
}

// PutSettingsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSettingsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSettingsUserId(ctx, userId)
	return err
}

// GetUserroles converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserroles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserroles(ctx)
	return err
}

// PostUserroles converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserroles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUserroles(ctx)
	return err
}

// DeleteUserrolesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserrolesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserrolesId(ctx, id)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersId(ctx, id)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// PutUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/roles", wrapper.GetRoles)
	router.POST(baseURL+"/roles", wrapper.PostRoles)
	router.DELETE(baseURL+"/roles/:id", wrapper.DeleteRolesId)
	router.GET(baseURL+"/roles/:id", wrapper.GetRolesId)
	router.PUT(baseURL+"/roles/:id", wrapper.PutRolesId)
	router.GET(baseURL+"/settings", wrapper.GetSettings)
	router.GET(baseURL+"/settings/:userId", wrapper.GetSettingsUserId)
	router.POST(baseURL+"/settings/:userId", wrapper.PostSettingsUserId)
	router.PUT(baseURL+"/settings/:userId", wrapper.PutSettingsUserId)
	router.GET(baseURL+"/userroles", wrapper.GetUserroles)
	router.POST(baseURL+"/userroles", wrapper.PostUserroles)
	router.DELETE(baseURL+"/userroles/:id", wrapper.DeleteUserrolesId)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
	router.PUT(baseURL+"/users/:id", wrapper.PutUsersId)

}
